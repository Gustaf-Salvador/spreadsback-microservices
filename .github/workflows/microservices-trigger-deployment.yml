name: Trigger Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'users/**'
      - 'orders/**'
      - 'products/**'
      - 'notifications/**'
      - '**/appsettings.json'
      - '**/template.yaml'
      - '**/*.csproj'
      - '**/*.cs'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'nonprod'
        type: choice
        options:
        - nonprod
        - prod
      services:
        description: 'Comma-separated list of services to deploy (leave empty for changed services only)'
        required: false
        default: ''
        type: string
      force_all:
        description: 'Force deploy all services regardless of changes'
        required: false
        default: false
        type: boolean

env:
  INFRASTRUCTURE_REPO: 'Gustaf-Salvador/spreadsback-infra'

jobs:
  detect-changed-services:
    name: 'Detect Changed Services'
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.detect.outputs.changed_services }}
      should_deploy: ${{ steps.detect.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: detect
        run: |
          if [[ "${{ github.event.inputs.force_all }}" == "true" ]]; then
            echo "changed_services=" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Force deploying all services"
            exit 0
          fi
          
          if [[ -n "${{ github.event.inputs.services }}" ]]; then
            echo "changed_services=${{ github.event.inputs.services }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Manual service selection: ${{ github.event.inputs.services }}"
            exit 0
          fi
          
          # For push events, detect changes
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get changed files since last commit
            if [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            else
              # First commit - get all files
              CHANGED_FILES=$(git ls-files)
            fi
            
            # Map changed files to services
            CHANGED_SERVICES=""
            
            # Check each service directory
            if echo "$CHANGED_FILES" | grep -q "^users/"; then
              CHANGED_SERVICES="${CHANGED_SERVICES}user-service,"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "^orders/"; then
              CHANGED_SERVICES="${CHANGED_SERVICES}order-service,"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "^products/"; then
              CHANGED_SERVICES="${CHANGED_SERVICES}product-service,"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "^notifications/"; then
              CHANGED_SERVICES="${CHANGED_SERVICES}notification-service,"
            fi
            
            # Remove trailing comma
            CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | sed 's/,$//')
            
            if [[ -n "$CHANGED_SERVICES" ]]; then
              echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "Detected changed services: $CHANGED_SERVICES"
            else
              echo "changed_services=" >> $GITHUB_OUTPUT
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "No microservice changes detected"
            fi
          else
            # Workflow dispatch without specific services
            echo "changed_services=" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - deploying all services"
          fi

  trigger-infrastructure:
    name: 'Trigger Infrastructure Deployment'
    needs: detect-changed-services
    runs-on: ubuntu-latest
    if: needs.detect-changed-services.outputs.should_deploy == 'true'
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'nonprod') }}
    
    steps:
      - name: Trigger infrastructure deployment
        run: |
          SERVICES="${{ needs.detect-changed-services.outputs.changed_services }}"
          ENVIRONMENT="${{ matrix.environment }}"
          REF="${{ github.sha }}"
          
          # Prepare payload
          PAYLOAD=$(cat << EOF
          {
            "event_type": "microservices-updated",
            "client_payload": {
              "services": "$SERVICES",
              "ref": "$REF",
              "environment": "$ENVIRONMENT",
              "repository": "${{ github.repository }}",
              "triggered_by": "${{ github.actor }}",
              "commit_sha": "${{ github.sha }}",
              "commit_message": $(echo '${{ github.event.head_commit.message }}' | jq -R .)
            }
          }
          EOF
          )
          
          echo "Triggering infrastructure deployment..."
          echo "Environment: $ENVIRONMENT"
          echo "Services: ${SERVICES:-all enabled services}"
          echo "Ref: $REF"
          
          # Trigger repository dispatch
          HTTP_STATUS=$(curl -s -w "%{http_code}" -o /tmp/response.json \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.INFRASTRUCTURE_DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "$PAYLOAD" \
            "https://api.github.com/repos/${{ env.INFRASTRUCTURE_REPO }}/dispatches")
          
          if [[ "$HTTP_STATUS" == "204" ]]; then
            echo "✅ Infrastructure deployment triggered successfully!"
            echo "Monitor progress at: https://github.com/${{ env.INFRASTRUCTURE_REPO }}/actions"
          else
            echo "❌ Failed to trigger deployment. HTTP status: $HTTP_STATUS"
            echo "Response:"
            cat /tmp/response.json || echo "No response file"
            exit 1
          fi

  validate-build:
    name: 'Validate Microservices Build'
    needs: detect-changed-services
    runs-on: ubuntu-latest
    if: needs.detect-changed-services.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Validate services can build
        run: |
          SERVICES="${{ needs.detect-changed-services.outputs.changed_services }}"
          
          if [[ -z "$SERVICES" ]]; then
            # Build all services
            SERVICES=$(find . -name "*.csproj" -type f | sed 's|./||' | sed 's|/[^/]*\.csproj||' | sort -u | tr '\n' ',' | sed 's/,$//')
          fi
          
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
          
          for SERVICE in "${SERVICE_ARRAY[@]}"; do
            SERVICE=$(echo "$SERVICE" | xargs) # trim whitespace
            [[ -z "$SERVICE" ]] && continue
            
            # Map service name to directory (handle naming differences)
            case "$SERVICE" in
              "user-service")
                SERVICE_DIR="users"
                ;;
              "order-service")
                SERVICE_DIR="orders"
                ;;
              "product-service")
                SERVICE_DIR="products"
                ;;
              "notification-service")
                SERVICE_DIR="notifications"
                ;;
              *)
                SERVICE_DIR="$SERVICE"
                ;;
            esac
            
            if [[ -d "$SERVICE_DIR" ]]; then
              echo "Validating build for $SERVICE ($SERVICE_DIR)..."
              
              cd "$SERVICE_DIR"
              
              # Restore and build
              dotnet restore
              dotnet build --configuration Release --no-restore
              
              # Run tests if they exist
              if find . -name "*Test*.csproj" -o -name "*.Test.csproj" -o -name "*.Tests.csproj" | grep -q .; then
                echo "Running tests for $SERVICE..."
                dotnet test --configuration Release --no-build
              fi
              
              cd ..
              echo "✅ $SERVICE build validation completed"
            else
              echo "⚠️  Service directory not found: $SERVICE_DIR"
            fi
          done

  notify-deployment:
    name: 'Notify Deployment Status'
    needs: [detect-changed-services, trigger-infrastructure, validate-build]
    runs-on: ubuntu-latest
    if: always() && needs.detect-changed-services.outputs.should_deploy == 'true'
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Microservices Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'nonprod') }}" >> $GITHUB_STEP_SUMMARY
          echo "**Services:** ${{ needs.detect-changed-services.outputs.changed_services || 'All enabled services' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-build.result }}" == "success" ]]; then
            echo "✅ **Build Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Validation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.trigger-infrastructure.result }}" == "success" ]]; then
            echo "✅ **Infrastructure Trigger:** Success" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Monitor deployment progress: [Infrastructure Actions](https://github.com/${{ env.INFRASTRUCTURE_REPO }}/actions)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Infrastructure Trigger:** Failed" >> $GITHUB_STEP_SUMMARY